@page "/"
@using ConsultaCNPJ.Model
@using RestSharp
@using Newtonsoft.Json
<style>
	body {
		background-color: #f0f0f0;
	}
</style>

<PageTitle>Index</PageTitle>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-danger" role="alert" style="display: @(_visibleAlert ? "block" : "none")">
		<span class="close" role="button" @onclick="CloseAlert">X</span>
		@ErrorMessage
	</div>
}

<div class="container text-center" style=" display: @(Resultado == null ? "block" : "none")">
	<h1>Verificar Situação Cadastral</h1>
	<div class="row justify-content-center">
		<div class="col-md-6">
			<input class="form-control" @bind="CNPJ" placeholder="Digite o CNPJ" />
		</div>
	</div>
	<div class="row justify-content-center  mt-3">
		<button class="btn btn-primary col-md-6" @onclick="Verificar" disabled="@isLoading">Verificar</button>
	</div>
</div>


@if (isLoading)
{
	<div style="display:flex; gap:10px; justify-content:center; align-items:center">
		<div class="spinner-border mt-3" role="status"></div>
		Buscando...
	</div>
}
<div style="display: @((Resultado != null && _visibleButton) ? "block" : "none")">
	<div class="row justify-content-center  mt-3">
		<button class="btn btn-primary col-md-6" @onclick="CloseButton">Nova Busca</button>
	</div>
</div>
<style>
	.table-rounded {
		border-radius: 50px;
	}

	.borda-arredondada {
		border-radius: 10px; /* ajuste conforme necessário */
		border: 2px solid black; /* cor e largura da borda */
	}
</style>


@if (Resultado != null && !string.IsNullOrEmpty(Resultado.CNPJ))
{
	<div class="borda-arredondada mt-3">
		<table class="table table-borderless">
			<tbody>
				<tr>
					<td style="width:20%" align="right"><b>CNPJ:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.CNPJ</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Abertura:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Abertura</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Situacao:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Situacao</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Tipo:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Tipo</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Nome:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Nome</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Fantasia:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Fantasia</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Logradouro:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Logradouro</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Municipio:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Municipio</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Bairro:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Bairro</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>UF:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.UF</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Bairro:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Bairro</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>CEP:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.CEP</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Email:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Email</b></td>
				</tr>
				<tr>
					<td style="width:20%" align="right"><b>Telefone:</b></td>
					<td style="width:80%" align="left"><b>@Resultado.Telefone</b></td>
				</tr>
			</tbody>
		</table>
	</div>
}

@code {
	private string CNPJ;
	private ConsultaCnpjResponse? Resultado;
	public string ErrorMessage { get; set; }
	private bool isLoading = false;
	private bool _visibleAlert = true;
	private bool _visibleButton = true;
	private string cor = "#FF0000";

	private async Task Verificar()
	{
		isLoading = true;

		if (string.IsNullOrEmpty(CNPJ))
		{
			ErrorMessage = "Por favor, insira um CNPJ.";
			isLoading = false;
			return;
		}

		string cnpj = CNPJ.Replace("-", "").Replace(".", "").Replace("/", "");

		if (!cnpj.All(char.IsDigit))
		{
			ErrorMessage = "O CNPJ pode conter apenas dígitos.";
			isLoading = false;
			return;
		}

		if (cnpj.Length != 14)
		{
			ErrorMessage = "O CNPJ deve conter 14 números.";
			isLoading = false;
			return;
		}

		var client = new RestClient("https://s031554ygi.execute-api.us-east-1.amazonaws.com");
		var request = new RestRequest($"/dev/Cliente?cnpj={cnpj}", Method.Get);

		RestResponse response = await client.ExecuteAsync(request);

		if ((response.StatusCode == System.Net.HttpStatusCode.OK) || (response.StatusCode == System.Net.HttpStatusCode.Created))
			Resultado = JsonConvert.DeserializeObject<ConsultaCnpjResponse>(response.Content);

		isLoading = false;
		_visibleButton = Resultado != null;

		if (Resultado == null || string.IsNullOrEmpty(Resultado.CNPJ))
			ErrorMessage = "CNPJ não encontrado.";
	}

	private void CloseAlert()
	{
		_visibleAlert = false;
		ErrorMessage = string.Empty;
	}

	private void CloseButton()
	{
		_visibleButton = false;
		Resultado = null;
	}
}